import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.DpuVf8Pb.js";const E=JSON.parse('{"title":"文档规范","description":"","frontmatter":{},"headers":[],"relativePath":"web/chapter6.md","filePath":"web/chapter6.md"}'),t={name:"web/chapter6.md"},l=n(`<h1 id="文档规范" tabindex="-1">文档规范 <a class="header-anchor" href="#文档规范" aria-label="Permalink to &quot;文档规范&quot;">​</a></h1><p>文档对于项目开发和维护、学习、重构、以及知识管理非常重要。</p><p>和写测试一样、大部分开发人员会觉得写文档是一件痛苦的事情，不过只有时间能够证明它的价值。比如对于人员流动比较大的公司，如果有规范的文档体系，转交工作就会变动非常轻松。</p><p><strong>广义的文档不单指‘说明文件’本身，它有很多形式、来源和载体，可以描述一个知识、以及知识形成和迭代的过程</strong>。例如版本库代码提交记录、代码注释、决策和讨论记录、CHANGELOG、示例代码、规范、传统文档等等。</p><h2 id="文档格式" tabindex="-1">文档格式 <a class="header-anchor" href="#文档格式" aria-label="Permalink to &quot;文档格式&quot;">​</a></h2><p>对于开发者来说，<a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noreferrer">Markdown</a>是最适合的、最通用的文档格式。支持版本库在线预览和变更历史跟踪。</p><p>下面这些工具可以提高 Markdown 的开发效率:</p><ul><li>可视化编辑器 <ul><li><strong>Visual Code</strong>: 大部分代码编辑都支持 Markdown 编辑和预览</li><li><a href="https://typora.io" target="_blank" rel="noreferrer"><strong>typora</strong></a>: 跨平台的 Markdown 编辑器，推荐</li></ul></li><li><strong>markdownlint</strong>: 编码检查器</li><li>扩展(Visual Studio Code): <ul><li><strong>Markdown All in One</strong>: All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more)</li><li><strong>Markdown TOC</strong>: markdown 目录生成，我最常用的 markdown 插件</li></ul></li><li>图表绘制工具: <ul><li><a href="https://www.draw.io" target="_blank" rel="noreferrer"><strong>drawio</strong></a> 基于 Web 的图表绘制工具、也有离线客户端</li><li><strong>KeyNote/PPT</strong> 临时绘图也不错</li></ul></li></ul><h2 id="注释即文档" tabindex="-1">注释即文档 <a class="header-anchor" href="#注释即文档" aria-label="Permalink to &quot;注释即文档&quot;">​</a></h2><p><strong>必要和适量的注释对阅读源代码的人来说就是一个路牌, 可以少走很多弯路</strong>.</p><p>关于注释的一些准则，<a href="https://github.com/alibaba/p3c/blob/master/p3c-gitbook/%E7%BC%96%E7%A8%8B%E8%A7%84%E7%BA%A6/%E6%B3%A8%E9%87%8A%E8%A7%84%E7%BA%A6.md" target="_blank" rel="noreferrer">&lt;阿里巴巴 Java 开发手册&gt;</a>总结得非常好, 推荐基于这个来建立注释规范。另外通过 ESlint 是可以对注释进行一定程度的规范。</p><h2 id="代码即文档" tabindex="-1">代码即文档 <a class="header-anchor" href="#代码即文档" aria-label="Permalink to &quot;代码即文档&quot;">​</a></h2><p>现在有很多种工具支持从代码中解析和生成文档, 这可以给开发者简化很多文档维护的工作。</p><p>举个例子，我们经常会遇到修改了代码，但是文档忘记同步的情况。通过‘代码即文档’的方式至少可以<strong>保持文档和代码同步更新</strong>；另外<strong>很多工具会分析代码的数据类型</strong>，自动帮我们生成参数和返回值定义，这也可以减少很多文档编写工作以及出错率。</p><p>比如可以通过下面注释方式来生成组件文档:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Component } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Props注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ColumnProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> React</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HTMLAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** prop1 description */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  prop1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** prop2 description */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  prop2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   * prop3 description</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  prop3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** prop4 description */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  prop4</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;option1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;option2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;option3&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 对组件进行注释</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Component</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ColumnProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {}&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Column&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>相关的工具有:</p><ul><li>API 文档 <ul><li>Typescript <ul><li><a href="https://github.com/microsoft/tsdoc" target="_blank" rel="noreferrer">tsdoc</a> Typescript 官方的注释文档标准</li><li><a href="https://github.com/TypeStrong/typedoc" target="_blank" rel="noreferrer">typedoc</a> 基于 tsdoc 标准的文档生成器</li></ul></li><li>Javascript <ul><li><a href="https://github.com/jsdoc/jsdoc" target="_blank" rel="noreferrer">jsdoc</a> Javascript 文档注释标准和生成器</li></ul></li></ul></li><li>后端接口文档 <ul><li><a href="https://apifox.com/" target="_blank" rel="noreferrer">Apifox</a> API 设计、开发、测试一体化协作平台</li><li><a href="https://swagger.io" target="_blank" rel="noreferrer">Swagger</a> Restful 接口文档规范</li><li>GraphQL: 这个有很多工具，例如<a href="https://github.com/graphql/graphiql" target="_blank" rel="noreferrer">graphiql</a>, 集成了 Playground 和文档，很先进</li><li><a href="https://easy-mock.com/login" target="_blank" rel="noreferrer">Easy Mock</a> 一个可视化，并且能快速生成模拟数据的服务</li></ul></li><li>组件文档 <ul><li><a href="https://storybook.js.org" target="_blank" rel="noreferrer">StoryBook</a> 通用的组件开发、测试、文档工具</li><li>React <ul><li><a href="http://docz.site" target="_blank" rel="noreferrer">Docz</a></li><li><a href="https://github.com/styleguidist/react-styleguidist" target="_blank" rel="noreferrer">Styleguidist</a></li></ul></li><li>Vue <ul><li><a href="https://github.com/vue-styleguidist/vue-styleguidist" target="_blank" rel="noreferrer">vue-styleguidist</a></li></ul></li></ul></li></ul>`,18),e=[l];function p(r,h,k,o,d,g){return a(),i("div",null,e)}const y=s(t,[["render",p]]);export{E as __pageData,y as default};
