import{_ as e,c as a,o as l,a2 as t}from"./chunks/framework.DpuVf8Pb.js";const m=JSON.parse('{"title":"实时监控","description":"","frontmatter":{},"headers":[],"relativePath":"opendlp/introduction/chapter1.md","filePath":"opendlp/introduction/chapter1.md"}'),r={name:"opendlp/introduction/chapter1.md"},o=t(`<h1 id="实时监控" tabindex="-1">实时监控 <a class="header-anchor" href="#实时监控" aria-label="Permalink to &quot;实时监控&quot;">​</a></h1><h2 id="数据监控" tabindex="-1">数据监控 <a class="header-anchor" href="#数据监控" aria-label="Permalink to &quot;数据监控&quot;">​</a></h2><h3 id="功能说明" tabindex="-1">功能说明 <a class="header-anchor" href="#功能说明" aria-label="Permalink to &quot;功能说明&quot;">​</a></h3><p>项目的版本号应该根据某些规则进行迭代，这里推荐使用<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">语义化版本</a>规范。 <strong>通过这个规范，用户可以了解版本变更的影响范围</strong>。 规则如下：</p><ul><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li></ul><h3 id="版本控制系统规范" tabindex="-1">版本控制系统规范 <a class="header-anchor" href="#版本控制系统规范" aria-label="Permalink to &quot;版本控制系统规范&quot;">​</a></h3><p>大部分团队都使用<code>git</code>作为版本库，管理好代码也是一种学问。尤其是涉及多人并发协作、需要管理多个软件版本的情况下，定义良好的版本库管理规范，可以让大型项目更有组织性，也可以提高成员协作效率。</p><p>比较流行的<code>git</code>分支模型/工作流是<a href="https://www.git-tower.com/learn/git/ebook/cn/command-line/advanced-topics/git-flow" target="_blank" rel="noreferrer">git-flow</a>，但是大部分团队会根据自己的情况制定自己的 git 工作流规范。目前公司前端研发<code>git</code>分支模型如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>├── release</span></span>
<span class="line"><span>├── master</span></span>
<span class="line"><span>├── dev</span></span>
<span class="line"><span>├── member1</span></span>
<span class="line"><span>└── member2</span></span></code></pre></div><h4 id="release-分支" tabindex="-1">release 分支 <a class="header-anchor" href="#release-分支" aria-label="Permalink to &quot;release 分支&quot;">​</a></h4><p><code>release</code>分支表示一个已发布版本【用户正在使用的版本】。</p><ul><li>场景：<code>master</code>分支测试完毕后会合并到<code>release</code>分支， 并使用<code>Tag</code>标记应用版本和对应的工作版本。</li><li><code>Tag</code>规范：<code>v{主版本号}.{次版本号}.{修订号}</code>， 例如 v0.1.0。</li><li>人员：由项目负责人进行审核合并、普通开发者没有权限。</li></ul><h4 id="master-分支" tabindex="-1">master 分支 <a class="header-anchor" href="#master-分支" aria-label="Permalink to &quot;master 分支&quot;">​</a></h4><p><code>master</code>分支表示一个预发布版本【测试人员使用的版本】。</p><ul><li>场景：前端应用会跟随工作版本迭代，在<code>dev</code>分支自测稳定后，会合并到<code>master</code>分支， 并使用<code>Tag</code>标记应用版本和对应的工作版本。</li><li><code>Tag</code>规范：<code>v{主版本号}.{次版本号}.{修订号}</code>， 例如 v0.1.0。</li><li>人员：由项目负责人进行审核合并、普通开发者没有权限。</li></ul><h4 id="dev-分支" tabindex="-1">dev 分支 <a class="header-anchor" href="#dev-分支" aria-label="Permalink to &quot;dev 分支&quot;">​</a></h4><p><code>dev</code>分支表示正在开发中的版本。</p><p>最新的特性或<code>Bug</code>修复都会提交到这个分支，开发者如果在该分支进行了提交，在<code>push</code>到远程之前应该先<code>pull</code>一下， 并尽量使用<code>rebase</code>模式，保证分支的简洁。</p><ul><li>命名规范：<code>dev</code>。</li><li><code>Tag</code>规范：在 dev 分支中也可能会经历发布过程， 例如<code>Bug</code>修复版本. 这里同样使用<code>Tag</code>来标记这些发布. 例如 v0.1.1。</li><li>人员：项目负责人、普通开发者。</li></ul><h4 id="member-分支" tabindex="-1">member 分支 <a class="header-anchor" href="#member-分支" aria-label="Permalink to &quot;member 分支&quot;">​</a></h4><p><code>member</code>分支表示项目成员各自的分支。</p><p>开发者对应模块开发完毕要提交到项目成员各自分支上并同步到<code>dev</code>分支上。</p><ul><li><p>场景：</p><ul><li>涉及多人协作：团队多个成员在同一个项目下负责开发不同的功能，这时候每个成员在自己的 member 分支独立开发。</li><li>大功能开发：大功能开发跨越周期比较长，需要多次迭代才会稳定。这时候应该在独立的分支上开发，方便跟踪历史记录，也免于干扰<code>dev</code>分支的迭代和发布。</li></ul></li><li><p>命名规范：<code>{项目成员英文姓名}</code> 如：<code>zhangsan</code>。</p></li><li><p>提交规范：如果是在开发分支上进行开发，在推送到远程之前，应该使用<code>git rebase</code>形式更新本地分支。</p></li><li><p>人员：普通开发者。</p></li></ul><h3 id="提交信息规范" tabindex="-1">提交信息规范 <a class="header-anchor" href="#提交信息规范" aria-label="Permalink to &quot;提交信息规范&quot;">​</a></h3><p>组织好的提交信息， 可以提高项目的整体质量. 至少具有下面这些优点：</p><ul><li><strong>格式统一的提交信息有助于自动化生成 CHANGELOG</strong>。</li><li><strong>版本库不只是存放代码的仓库，它记录项目的开发日志，它应该要清晰表达这次提交的做了什么</strong>。 这些记录应该可以帮助后来者快速地学习和回顾代码， 也应该方便其他协作者 review 你的代码。</li><li><strong>规范化提交信息可以促进提交者提交有意义的、粒度合适的&#39;提交&#39;</strong>。提交者要想好要怎么描述这个提交，这样被动促进了他们去把控<strong>提交的粒度</strong>。</li></ul><p>社区上比较流行的提交信息规范是<a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit" target="_blank" rel="noreferrer">Angular 的提交信息规范</a>， 除此之外，这些也很不错：</p><ul><li><a href="https://github.com/atom/atom/blob/master/CONTRIBUTING.md#git-commit-messages" target="_blank" rel="noreferrer">Atom</a></li><li><a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-ember" target="_blank" rel="noreferrer">Ember</a></li><li><a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-eslint" target="_blank" rel="noreferrer">Eslint</a></li><li><a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-jquery" target="_blank" rel="noreferrer">JQuery</a></li></ul><p>另外这些工具可以帮助你检验提交信息， 以及生成 CHANGELOG：</p><ul><li><a href="https://github.com/conventional-changelog/conventional-changelog" target="_blank" rel="noreferrer">conventional-changelog</a> - 从项目的提交信息中生成 CHANGELOG 和发布信息</li><li><a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">commitlint</a> - 检验提交信息</li><li><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">commitizen</a> - 🔥 简单的提交规范和提交帮助工具，推荐</li><li><a href="https://github.com/conventional-changelog/commitlint" target="_blank" rel="noreferrer">standard-changelog</a> - angular 风格的提交命令行工具</li></ul><p>目前公司前端研发采用<a href="https://github.com/angular/angular/blob/master/CONTRIBUTING.md#commit" target="_blank" rel="noreferrer">Angular 的提交信息规范</a>，它的<code>message</code>格式如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;type&gt;(&lt;scope&gt;)： &lt;subject&gt;</span></span>
<span class="line"><span>&lt;BLANK LINE&gt;</span></span>
<span class="line"><span>&lt;body&gt;</span></span>
<span class="line"><span>&lt;BLANK LINE&gt;</span></span>
<span class="line"><span>&lt;footer&gt;</span></span></code></pre></div><p>说明：</p><ul><li>标题行：必填，描述主要修改类型和内容</li><li>主题内容：选填，描述为什么修改， 做了什么样的修改， 以及开发的思路等等</li><li>页脚注释：选填，放 Breaking Changes 或 Closed Issues</li></ul><p>我们可以通过<code>git-cz</code>插件可视化界面填写<code>message</code>信息，也可以通过<code>commmit -m &#39;feat： 新增xxx功能&#39;</code>来生成<code>message</code>信息。</p><h2 id="构建规范" tabindex="-1">构建规范 <a class="header-anchor" href="#构建规范" aria-label="Permalink to &quot;构建规范&quot;">​</a></h2><p>对于团队、或者需要维护多个项目场景，统一的构建工具链很重要， <strong>这套工具应该强调&quot;约定大于配置&quot;，让开发者更专注于业务的开发</strong>。</p><p>下面是社区上比较流行的构建工具：</p><ul><li><a href="https://cli.vuejs.org/" target="_blank" rel="noreferrer">vue-cli</a> - 🔥 零配置、渐进增强的项目构建 CLI</li><li><a href="https://github.com/facebook/create-react-app" target="_blank" rel="noreferrer">create-react-app</a> - 🔥 零配置开始 React 开发</li><li><a href="https://parceljs.org/" target="_blank" rel="noreferrer">parcel</a> - 零配置的 Web 应用打包工具</li><li><a href="https://github.com/fuse-box/fuse-box" target="_blank" rel="noreferrer">Fusebox</a> - 高速易用的打包工具</li><li><a href="https://github.com/developit/microbundle" target="_blank" rel="noreferrer">microbundle</a> - 零配置， 基于 Rollup，适合用于打包‘库’</li></ul><p>目前公司前端主要使用<a href="https://cli.vuejs.org/" target="_blank" rel="noreferrer">vue-cli</a>构建工具进行开发。</p><h2 id="发布工作流规范" tabindex="-1">发布工作流规范 <a class="header-anchor" href="#发布工作流规范" aria-label="Permalink to &quot;发布工作流规范&quot;">​</a></h2><p>发布工作流指的是将‘软件成品’对外发布(如测试或生产)的一套流程， 将这套流程规范化后，可以实现自动化.</p><p>举个例子， 一个典型的发布工作流如下：</p><p><img src="https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103150115.png" alt="chapter1_1"></p><ul><li>代码变更</li><li>提交代码变更到远程版本库</li><li>程序通过 CI 测试(例如 Travis CI 变绿)</li><li>提升 package.json 中的版本</li><li>生成 CHANGELOG</li><li>提交 package.json 和 CHANGELOG.md 文件</li><li>打上 Tag</li><li>推送</li></ul><p>如果你遵循上面的规范，那么就可以利用社区上现有的工具来自动化这个流程. 这些工具有：</p><ul><li><a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-cli" target="_blank" rel="noreferrer">conventional-changelog-cli</a></li><li><a href="https://github.com/conventional-changelog/conventional-github-releaser" target="_blank" rel="noreferrer">conventional-github-releaser</a></li></ul><h2 id="持续集成" tabindex="-1">持续集成 <a class="header-anchor" href="#持续集成" aria-label="Permalink to &quot;持续集成&quot;">​</a></h2><p>将整套开发工作流确定下来之后， 就可以使用<code>持续集成服务</code>来自动化执行整个流程。比如一个典型的 CI 流程：</p><p><img src="https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103150122.png" alt="chapter1_2"></p><p><strong>持续集成是什么，有什么意义呢</strong>?</p><p>我们需要<code>持续集成</code>拆成两个词分别来理解， 什么是<code>持续</code>? 什么是<code>集成</code>?</p><p><strong>持续(Continuous)， 可以理解为&#39;频繁&#39;或者‘连续性’</strong>. 不管是持续集成还是敏捷开发思维、看板，都认为‘持续’是它们的基础。</p><p>举一个通俗的例子，<strong>比如代码检查，‘持续的’的代码检查就是代码一变动(如保存，或者 IDE 实时检查、或者提交到版本库时)就马上检查代码，而‘非持续’的代码检查就是在完成所有编码后，再进行检查</strong>。对比两者可以发现，持续性的代码检查可以尽早地发现错误，而且错误也比较容易理解和处理，反之非持续性的代码检查，可能会发现一堆的错误，失之毫厘谬以千里，错误相互牵连，最终会变得难以收拾。</p><p><strong>‘持续’的概念，可以用于软件开发的方方面面，本质上就是把传统瀑布式的软件开发流程打碎，形成一个个更小的开发闭环，持续地输出产品，同时产品也持续地给上游反馈和纠正</strong>。</p><p><img src="https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103150126.png" alt="chapter1_3"></p><p><strong>那什么是‘集成’呢</strong>？狭义的集成可以简单认为是<a href="https://juejin.im/post/5d2c515d6fb9a07ead5a2bbe#heading-26" target="_blank" rel="noreferrer">‘集成测试’</a>。集成测试可以对代码静态测试、单元测试、通过单元测试后可以进行集成测试，在应用组成一个整体后在模拟环境中跑 E2E 测试等等。也就是说，在这里进行一系列的自动化测试来验证软件系统。</p><p>广义的持续集成服务，不仅仅是测试，它还衍生出很多概念，例如持续交付、持续部署，如下图</p><p><img src="https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103150130.png" alt="chapter1_4"></p><p>OK， <strong>总结一下为什么持续集成的好处</strong>：</p><ul><li>尽早发现错误，快速试错。越早发现错误，处理错误的成本越低</li><li>自动化工作流，减少人工干预。人类比机器容易犯错， 而且机器擅长做重复的事情</li></ul><p><strong>对于持续集成规范一般会定义这些内容</strong>：</p><ul><li>执行的环境. 比如容器、Node 版本、操作系统等等</li><li>触发的条件。比如定时触发、在哪个分支触发、会触发什么任务等等</li><li>执行的任务</li><li>划分持续集成的阶段. 比如 <ul><li>检查：包括单元测试和代码 lint. 所有 push 到版本库的代码都会跑这个阶段. 一般可以在提交 title 中包含[ci skip]来跳过这个阶段</li><li>构建： 对前端项目进行构建. 只有打上版本 tag 的提交或 release 分支会跑构建任务</li><li>发布： 将前端的构建结果进行交付/发布. 只有打上版本 tag 的提交或者 release 分支在构建成功后会跑发布任务</li></ul></li><li>定义持续集成脚本模板</li></ul><p>常用的 CI 服务：</p><ul><li>GitHub <ul><li><a href="https://github.com/marketplace/travis-ci" target="_blank" rel="noreferrer">Travis CI</a></li><li><a href="https://github.com/marketplace/circleci" target="_blank" rel="noreferrer">CircleCI</a></li><li><a href="https://github.com/marketplace/category/continuous-integration" target="_blank" rel="noreferrer">完整列表</a></li></ul></li><li>GitLab： <a href="https://docs.gitlab.com/ee/ci/" target="_blank" rel="noreferrer">Gitlab-CI</a></li><li>通用 <ul><li><a href="https://jenkins.io" target="_blank" rel="noreferrer">Jenkins</a></li></ul></li></ul><p>扩展</p><ul><li><a href="https://juejin.im/post/58f9ee860ce46300611be392" target="_blank" rel="noreferrer">持续集成是什么</a></li></ul><p>目前公司前端开发部分未添加持续集成功能。</p>`,68),i=[o];function n(c,s,p,g,h,d){return l(),a("div",null,i)}const b=e(r,[["render",n]]);export{m as __pageData,b as default};
