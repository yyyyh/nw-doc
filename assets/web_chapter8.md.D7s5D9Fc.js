import{_ as r,c as e,o as t,a2 as l}from"./chunks/framework.DlC1fzyH.js";const f=JSON.parse('{"title":"测试规范","description":"","frontmatter":{},"headers":[],"relativePath":"web/chapter8.md","filePath":"web/chapter8.md"}'),a={name:"web/chapter8.md"},i=l('<h1 id="测试规范" tabindex="-1">测试规范 <a class="header-anchor" href="#测试规范" aria-label="Permalink to &quot;测试规范&quot;">​</a></h1><p>测试是保障代码质量的重要手段，但是很少有人愿意在这里花太多时间。</p><p>比如笔者，我很少会去给业务代码和组件写单元测试，除非自己对代码非常没有信心，按照我的理念写测试不如将代码写得更简单一点，比如把一个函数拆分为更小的函数，保持单一职责。</p><p>但是<strong>对于一些底层、共享的代码模块还是有测试的必要的</strong>。</p><p>在<a href="https://juejin.im/post/5d2c515d6fb9a07ead5a2bbe" target="_blank" rel="noreferrer">不知道测试什么？这些是你需要知道的软件测试类型和常识</a>中，列举了一些开发者需要关注的测试类型和常识, 如果按照测试的阶段进行分类，大概是这样子的:</p><p><img src="https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103160041.png" alt="chapter8_1"></p><p>其中前端开发者需要关注的主要有以下几种测试类型:</p><ul><li>单元测试: 对独立的软件模块进行测试 <ul><li><strong>UI组件测试</strong>: 包括了快照(Snapshot)测试</li></ul></li><li><strong>集成测试</strong>: 在单元测试的基础上，将模块组合起来，测试它们的组合性</li><li><strong>E2E测试</strong>: 在完整、真实的运行环境下模拟真实用户对应用进行测试。<strong>主要测试前端和后端的协调性</strong></li><li><strong>兼容性测试</strong>: 上面提到了浏览器兼容规范，在将版本提交给测试/发布之前，需要确保能符合兼容性要求</li><li><strong>性能测试</strong>: 测试和分析是否存在性能问题</li><li>其他: <ul><li>安全测试</li><li>SEO测试</li></ul></li></ul><p>因为对于小公司来说整个软件开发流程可能没有那么规范，比如很难构建一个完整的端对端测试环境，这些都不是前端团队可以操作的范围, 所以自动化测试很难推行。但是可以根据团队和业务情况逐步进行开展。</p><p>可实施性比较高的, 也比较简单是单元测试，所以本节也重点关注单元测试.</p><h2 id="测试流程" tabindex="-1">测试流程 <a class="header-anchor" href="#测试流程" aria-label="Permalink to &quot;测试流程&quot;">​</a></h2><p>首先要定义一个合适的软件测试流程, 合适的测试流程可以降低开发和测试团队之间的沟通协作成本、提高测试效率。例如推荐的测试流程:</p><p><img src="https://pic-go-1256738511.cos.ap-chengdu.myqcloud.com/images/20201103160057.png" alt="chapter8_2"></p><h2 id="单元测试" tabindex="-1">单元测试 <a class="header-anchor" href="#单元测试" aria-label="Permalink to &quot;单元测试&quot;">​</a></h2><p>单元测试有很多<strong>好处</strong>, 比如:</p><ul><li><strong>提高信心，适应变化和迭代</strong>. 如果现有代码有较为完善的单元测试，在代码重构时，可以检验模块是否依然可以工作, 一旦变更导致错误，单元测试也可以帮助我们快速定位并修复错误</li><li><strong>单元测试是集成测试的基础</strong></li><li><strong>测试即文档</strong>。如果文档不能解决你的问题，在你打算看源码之前，可以查看单元测试。通过这些测试用例，开发人员可以直观地理解程序单元的基础API</li><li><strong>提升代码质量。易于测试的代码，一般都是好代码</strong></li></ul><p><strong>测什么?</strong></p><p>业务代码或业务组件是比较难以实施单元测试的，一方面它们比较多变、另一方面很多团队很少有精力维护这部分单元测试。所以<strong>通常只要求对一些基础/底层的组件、框架或者服务进行测试, 视情况考虑是否要测试业务代码</strong></p><p><strong>测试的准则</strong>:</p><ul><li>推荐Petroware的<a href="https://petroware.no/unittesting.html" target="_blank" rel="noreferrer">Unit Testing Guidelines</a>, 总结了27条单元测试准则，非常受用.</li><li>另外&lt;阿里巴巴的Java开发手册&gt;中总结的<a href="https://github.com/alibaba/p3c/blob/master/p3c-gitbook/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.md" target="_blank" rel="noreferrer">单元测试准则</a>, 也不错，虽然书名是Java，准则是通用的.</li></ul><p><strong>单元测试指标</strong>:</p><p>一般使用<a href="https://zh.wikipedia.org/wiki/%E4%BB%A3%E7%A2%BC%E8%A6%86%E8%93%8B%E7%8E%87" target="_blank" rel="noreferrer"><code>测试覆盖率</code></a>来量化，尽管对于覆盖率能不能衡量单元测试的有效性存在较多争议。</p><p>大部分情况下还是推荐尽可能提高覆盖率, 比如要求<code>语句覆盖率达到70%；核心模块的语句覆盖率和分支覆盖率都要达到100%</code>. 视团队情况而定</p><p>扩展:</p><ul><li><a href="https://www.infoq.cn/article/test-coverage-rate-role" target="_blank" rel="noreferrer">测试覆盖（率）到底有什么用？</a></li></ul><p><strong>相关工具</strong></p><ul><li><p>Headless Browsers: 无头浏览器是网页自动化的重要运行环境。 常用于功能测试、单元测试、网络爬虫</p><ul><li><a href="https://github.com/GoogleChrome/puppeteer" target="_blank" rel="noreferrer">puppeteer</a></li><li><a href="https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md" target="_blank" rel="noreferrer">Headless Chromium</a></li></ul></li><li><p>测试框架</p><ul><li><p>Jest</p><p>🔥Facebook的单元测试框架. 零配置, 支持组件快照测试、模块Mock、Spy. 一般场景, 单元测试学它一个就行了</p><ul><li>组件测试 <ul><li><a href="https://github.com/testing-library" target="_blank" rel="noreferrer">testing-library</a> 🔥</li><li><a href="https://github.com/airbnb/enzyme" target="_blank" rel="noreferrer">Enzyme</a></li></ul></li></ul></li><li><p><a href="https://theintern.github.io/" target="_blank" rel="noreferrer">Intern</a></p></li></ul></li><li><p>单元测试</p><ul><li><a href="https://github.com/avajs/ava" target="_blank" rel="noreferrer">AVA</a></li><li><a href="http://jasmine.github.io/" target="_blank" rel="noreferrer">Jasmine</a></li><li><a href="http://mochajs.org/" target="_blank" rel="noreferrer">Mocha</a></li><li><a href="https://github.com/substack/tape" target="_blank" rel="noreferrer">Tape</a></li></ul></li><li><p>断言库</p><ul><li><a href="http://chaijs.com/" target="_blank" rel="noreferrer">Chai</a></li><li><a href="https://github.com/Automattic/expect.js" target="_blank" rel="noreferrer">expect.js</a></li><li><a href="http://shouldjs.github.io/" target="_blank" rel="noreferrer">should.js</a></li></ul></li><li><p>Mock/Stubs/Spies</p><ul><li><a href="http://sinonjs.org/" target="_blank" rel="noreferrer">sinon.js</a></li></ul></li><li><p>代码覆盖率</p><ul><li><a href="https://github.com/gotwarlost/istanbul" target="_blank" rel="noreferrer">istanbul</a></li></ul></li><li><p>基准测试</p><ul><li><a href="http://benchmarkjs.com/" target="_blank" rel="noreferrer">benchmark.js</a></li><li><a href="https://jsperf.com/" target="_blank" rel="noreferrer">jsperf.com</a></li></ul></li></ul>',27),o=[i];function n(s,p,h,g,c,u){return t(),e("div",null,o)}const m=r(a,[["render",n]]);export{f as __pageData,m as default};
